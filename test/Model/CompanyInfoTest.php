<?php
/**
 * CompanyInfoTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  FattureInCloud
 * @author   Fatture In Cloud API team
 * @link     https://fattureincloud.it
 */

/**
 * Fatture in Cloud API v2 - API Reference
 *
 * ## Request informations In every request description you will be able to find some additional informations about context, permissions and supported functionality:  | Parameter | Description | |-----------|-------------| | 👥 Context | Indicate the subject of the request. Can be `company`, `user` or `accountant`.  | | 🔒 Required scope | If present, indicates the required scope to fulfill the request. | | 🔍 Filtering | If present, indicates which fields support the filtering feature. | | ↕️ Sorting | If present, indicates which fields support the sorting feature. | | 📄 Paginated results | If present, indicate that the results are paginated. | | 🎩 Customized responses supported | If present, indicate that you can use `field` or `fieldset` to customize the response body. |  For example the request `GET /entities/{entityRole}` have tis informations: \\ 👥 Company context \\ 🔒 Required scope: `entity.clients:r` or `entity.suppliers:r` (depending on `entityRole`) \\ 🔍 Filtering: `id`, `name` \\ ↕️ Sorting: `id`, `name` \\ 📄 Paginated results \\ 🎩 Customized responses supported  Keep in mind that if you are making **company realted requests**, you will need to specify the company id in the requests: ``` GET /c/{company_id}/issued_documents ```
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@fattureincloud.it
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace FattureInCloud\Test\Model;

use PHPUnit\Framework\TestCase;
use \FattureInCloud\ObjectSerializer;

/**
 * CompanyInfoTest Class Doc Comment
 *
 * @category    Class
 * @description Detailed information for the company.
 * @package     FattureInCloud
 * @author   Fatture In Cloud API team
 * @link     https://fattureincloud.it
 */
class CompanyInfoTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $json = '{
            "id": 12345,
            "name": "Studio Commercialista",
            "email": "mario.rossi@example.com",
            "type": "accountant",
            "fic": true,
            "fic_plan_name": "premium_plus",
            "fic_signup_date": "2013-11-01",
            "fic_license_expire": "2030-12-31",
            "use_fic": true,
            "fic_need_setup": false,
            "fic_license_type": "coupon_b",
            "dic": true,
            "dic_plan_name": "trial",
            "dic_signup_date": "2018-03-26",
            "dic_license_expire": "2022-12-31",
            "use_dic": true,
            "dic_license_type": "",
            "registration_service": "fic",
            "can_use_coupon": false,
            "is_accountant": true,
            "accountant_id": 12345,
            "fic_payment_subject": "client",
            "dic_payment_subject": "client",
            "dic_plan": "trial",
            "dic_need_setup": false,
            "access_info": {
                "role": "master",
                "through_accountant": false,
                "permissions": {
                  "fic_situation": "read",
                  "fic_clients": "write",
                  "fic_suppliers": "write",
                  "fic_products": "write",
                  "fic_issued_documents": "detailed",
                  "fic_issued_documents_detailed": {
                    "quotes": "write",
                    "proformas": "write",
                    "invoices": "write",
                    "receipts": "write",
                    "delivery_notes": "write",
                    "credit_notes": "write",
                    "orders": "write",
                    "work_reports": "write",
                    "supplier_orders": "write",
                    "self_invoices": "write"
                  },
                  "fic_received_documents": "write",
                  "fic_receipts": "write",
                  "fic_calendar": "write",
                  "fic_archive": "write",
                  "fic_taxes": "write",
                  "fic_stock": "write",
                  "fic_cashbook": "write",
                  "fic_settings": "write",
                  "fic_emails": "read",
                  "dic_employees": "none",
                  "dic_timesheet": "none",
                  "dic_settings": "none",
                  "fic_invoice_trading": "none",
                  "fic_export": "write",
                  "fic_import_clients_suppliers": "write",
                  "fic_import_products": "write",
                  "fic_import_issued_documents": "none",
                  "fic_import_bankstatements": "none",
                  "fic_recurring": "write",
                  "fic_riba": "write"
                }
              },
              "plan_info": {
                "limits": {
                  "clients": 5000,
                  "suppliers": 5000,
                  "products": 5000,
                  "documents": 3000
                },
                "functions": {
                  "document_attachments": true,
                  "archive": true,
                  "payment_notifications": true,
                  "paypal": true,
                  "receipts": true,
                  "e_invoice": true,
                  "genius": true,
                  "stock": true,
                  "smtp": true,
                  "mail_tracking": true,
                  "subaccounts": true,
                  "tessera_sanitaria": true,
                  "recurring": true,
                  "sofort": false,
                  "cerved": true,
                  "ts_digital": true,
                  "ts_pay": true,
                  "ts_invoice_trading": true
                },
                "functions_status": {
                  "ts_digital": {
                    "active": true
                  },
                  "ts_pay": {
                    "active": true
                  }
                }
            }
        }';

        $this->array = json_decode($json, true);

        $this->object = ObjectSerializer::deserialize($json, '\FattureInCloud\Model\CompanyInfo');
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CompanyInfo"
     */
    public function testCompanyInfo()
    {
        foreach ($this->array as $key => $value) 
        {
           Testcase::assertArrayHasKey($key, $this->object);
        }
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        TestCase::assertEquals($this->object['id'], $this->array['id']);
    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
        TestCase::assertEquals($this->object['name'], $this->array['name']);
    }

    /**
     * Test attribute "email"
     */
    public function testPropertyEmail()
    {
        TestCase::assertEquals($this->object['email'], $this->array['email']);
    }

    /**
     * Test attribute "type"
     */
    public function testPropertyType()
    {
        TestCase::assertEquals($this->object['type'], $this->array['type']);
    }

    /**
     * Test attribute "fic"
     */
    public function testPropertyFic()
    {
        TestCase::assertEquals($this->object['fic'], $this->array['fic']);
    }

    /**
     * Test attribute "fic_plan_name"
     */
    public function testPropertyFicPlanName()
    {
        TestCase::assertEquals($this->object['fic_plan_name'], $this->array['fic_plan_name']);
    }

    /**
     * Test attribute "fic_license_type"
     */
    public function testPropertyFicLicenseType()
    {
        TestCase::assertEquals($this->object['fic_license_type'], $this->array['fic_license_type']);
    }

    /**
     * Test attribute "fic_payment_subject"
     */
    public function testPropertyFicPaymentSubject()
    {
        TestCase::assertEquals($this->object['fic_payment_subject'], $this->array['fic_payment_subject']);
    }

    /**
     * Test attribute "fic_license_expire"
     */
    public function testPropertyFicLicenseExpire()
    {
        $date = new \DateTime($this->array['fic_license_expire']);
        TestCase::assertEquals($this->object['fic_license_expire'], $date);
    }

    /**
     * Test attribute "fic_signup_date"
     */
    public function testPropertyFicSignupDate()
    {
        TestCase::assertEquals($this->object['fic_signup_date'], $this->array['fic_signup_date']);
    }

    /**
     * Test attribute "use_fic"
     */
    public function testPropertyUseFic()
    {
        TestCase::assertEquals($this->object['use_fic'], $this->array['use_fic']);
    }

    /**
     * Test attribute "fic_need_setup"
     */
    public function testPropertyFicNeedSetup()
    {
        TestCase::assertEquals($this->object['fic_need_setup'], $this->array['fic_need_setup']);
    }

    /**
     * Test attribute "dic"
     */
    public function testPropertyDic()
    {
        TestCase::assertEquals($this->object['dic'], $this->array['dic']);
    }

    /**
     * Test attribute "dic_plan"
     */
    public function testPropertyDicPlan()
    {
        TestCase::assertEquals($this->object['dic_plan'], $this->array['dic_plan']);
    }

    /**
     * Test attribute "dic_license_expire"
     */
    public function testPropertyDicLicenseExpire()
    {
        $date = new \DateTime($this->array['dic_license_expire']);
        TestCase::assertEquals($this->object['dic_license_expire'], $date);    
    }

    /**
     * Test attribute "use_dic"
     */
    public function testPropertyUseDic()
    {
        TestCase::assertEquals($this->object['use_dic'], $this->array['use_dic']);
    }

    /**
     * Test attribute "dic_need_setup"
     */
    public function testPropertyDicNeedSetup()
    {
        TestCase::assertEquals($this->object['dic_need_setup'], $this->array['dic_need_setup']);
    }

    /**
     * Test attribute "access_info"
     */
    public function testPropertyAccessInfo()
    {
        foreach ($this->array['access_info'] as $key => $value) 
        {
           Testcase::assertArrayHasKey($key, $this->object['access_info']);
        }
    }

    /**
     * Test attribute "plan_info"
     */
    public function testPropertyPlanInfo()
    {
        foreach ($this->array['plan_info'] as $key => $value) 
        {
           Testcase::assertArrayHasKey($key, $this->object['plan_info']);
        }
    }

    /**
     * Test attribute "can_use_coupon"
     */
    public function testPropertyCanUseCoupon()
    {
        TestCase::assertEquals($this->object['can_use_coupon'], $this->array['can_use_coupon']);
    }

    /**
     * Test attribute "accountant_id"
     */
    public function testPropertyAccountantId()
    {
        TestCase::assertEquals($this->object['accountant_id'], $this->array['accountant_id']);
    }

    /**
     * Test attribute "dic_license_type"
     */
    public function testPropertyDicLicenseType()
    {
        TestCase::assertEquals($this->object['dic_license_type'], $this->array['dic_license_type']);
    }

    /**
     * Test attribute "dic_payment_subject"
     */
    public function testPropertyDicPaymentSubject()
    {
        TestCase::assertEquals($this->object['dic_payment_subject'], $this->array['dic_payment_subject']);
    }

    /**
     * Test attribute "dic_plan_name"
     */
    public function testPropertyDicPlanName()
    {
        TestCase::assertEquals($this->object['dic_plan_name'], $this->array['dic_plan_name']);
    }

    /**
     * Test attribute "dic_signup_date"
     */
    public function testPropertyDicSignupDate()
    {
        TestCase::assertEquals($this->object['dic_signup_date'], $this->array['dic_signup_date']);
    }

    /**
     * Test attribute "is_accountant"
     */
    public function testPropertyIsAccountant()
    {
        TestCase::assertEquals($this->object['is_accountant'], $this->array['is_accountant']);
    }

    /**
     * Test attribute "registration_service"
     */
    public function testPropertyRegistrationService()
    {
        TestCase::assertEquals($this->object['registration_service'], $this->array['registration_service']);
    }
}
